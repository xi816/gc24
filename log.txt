mkfs.govnfs 2.0 for GovnFS 2.0
mkfs.govnfs: erasing the header (16777216 bytes ROM)
govnos/boot.asm: program size: 1803 bytes
$0000: INST JMPa boot
$0004: INST INT8 1
$0006: INST POPr 0
$0008: INST CMPri (0, 127)
$000C: INST JEa scans.back
$0010: INST PUSHr 0
$0012: INST INT8 2
$0014: INST CMPri (0, 10)
$0018: INST JEa scans.end
$001C: INST STOBc (4, 0)
$001E: INST INXwl clen
$0022: INST JMPa scans
$0026: INST MOVrl (5, 'clen')
$002A: INST LODWc (5, 0)
$002C: INST CMPri (0, 0)
$0030: INST JEa scans
$0034: INST PUSHr 4
$0036: INST MOVrl (4, 'bs_seq')
$003A: INST INT8 129
$003C: INST POPr 4
$003E: INST DEXr 4
$003F: INST DEXwl clen
$0043: INST JMPa scans
$0047: INST MOVri (0, 0)
$004B: INST STOBc (4, 0)
$004D: INST RET None
$004E: INST LODBc (4, 0)
$0050: INST LODBc (5, 1)
$0052: INST CMPrc (0, 1)
$0054: INST JNEa strcmp.fail
$0058: INST CMPri (0, 0)
$005C: INST JEa strcmp.eq
$0060: INST JMPa strcmp
$0064: INST MOVri (0, 0)
$0068: INST RET None
$0069: INST MOVri (0, 1)
$006D: INST RET None
$006E: INST LODBc (4, 0)
$0070: INST LODBc (5, 1)
$0072: INST CMPrc (0, 1)
$0074: INST JNEa pstrcmp.fail
$0078: INST CMPrc (0, 2)
$007A: INST JEa pstrcmp.eq
$007E: INST JMPa pstrcmp
$0082: INST MOVri (0, 0)
$0086: INST RET None
$0087: INST MOVri (0, 1)
$008B: INST RET None
$008C: INST DEXr 2
$008D: INST LDDS None
$008E: INST INXr 4
$008F: INST LODBc (5, 1)
$0091: INST CMPrc (0, 1)
$0093: INST JNEa dmemcmp.fail
$0097: INST CMPri (2, 0)
$009B: INST JEa dmemcmp.eq
$009F: INST JMPa dmemcmp
$00A3: INST MOVri (0, 0)
$00A7: INST RET None
$00A8: INST MOVri (0, 1)
$00AC: INST RET None
$00AD: INST LODBc (4, 0)
$00AF: INST CMPrc (0, 2)
$00B1: INST RE None
$00B2: INST JMPa strtok
$00B6: INST LODBc (4, 0)
$00B8: INST CMPri (0, 0)
$00BC: INST JEa strnul.nul
$00C0: INST MOVri (0, 1)
$00C4: INST RET None
$00C5: INST MOVri (0, 0)
$00C9: INST RET None
$00CA: INST DEXr 2
$00CB: INST LODBc (4, 0)
$00CD: INST STOBc (5, 0)
$00CF: INST LOOPa memcpy.loop
$00D3: INST RET None
$00D4: INST DEXr 2
$00D5: INST LODBc (4, 0)
$00D7: INST PUSHr 0
$00D9: INST INT8 2
$00DB: INST LOOPa write.loop
$00DF: INST RET None
$00E0: INST MOVrl (5, 'puti_buf')
$00E4: INST ADDri (5, 7)
$00E8: INST DIVri (0, 10)
$00EC: INST ADDri (3, 48)
$00F0: INST STOBc (5, 3)
$00F2: INST SUBri (5, 2)
$00F6: INST CMPri (0, 0)
$00FA: INST JNEa puti.loop
$00FE: INST MOVrl (4, 'puti_buf')
$0102: INST MOVri (2, 8)
$0106: INST CALLa write
$010A: INST CALLa puti_clr
$010E: INST RET None
$010F: INST MOVrl (4, 'puti_buf')
$0113: INST MOVri (0, 0)
$0117: INST MOVri (2, 8)
$011B: INST STOBc (4, 0)
$011D: INST LOOPa puti_clr.loop
$0121: INST RET None
$0122: RESERVE __B_reserve 8
$012A: INST MOVri (0, 0)
$012E: INST INT8 1
$0130: INST POPr 1
$0132: INST CMPri (1, 10)
$0136: INST RE None
$0137: INST CMPri (1, 32)
$013B: INST RE None
$013C: INST CMPri (1, 48)
$0140: INST JNa scani.loop
$0144: INST CMPri (1, 58)
$0148: INST JSa scani.loop
$014C: INST CMPri (1, 127)
$0150: INST JEa scani.back
$0154: INST MULri (0, 10)
$0158: INST PUSHr 1
$015A: INST INT8 2
$015C: INST SUBri (1, 48)
$0160: INST ADDrc (0, 1)
$0162: INST JMPa scani.loop
$0166: INST CMPri (0, 0)
$016A: INST JNEa scani.back_strict
$016E: INST JMPa scani.loop
$0172: INST MOVrl (4, 'bs_seq')
$0176: INST PUSHr 0
$0178: INST INT8 129
$017A: INST POPr 0
$017C: INST DIVri (0, 10)
$0180: INST JMPa scani.loop
$0184: INST MOVri (3, 1)
$0188: INST MOVri (4, 512)
$018C: INST LDDS None
$018D: INST CMPri (0, 1)
$0191: INST JEa gfs2_read_file.flcheck
$0195: INST CMPri (0, 247)
$0199: INST JEa gfs2_read_file.fail
$019D: INST INXr 4
$019E: INST MOVri (2, 15)
$01A2: INST MOVrl (5, 'com_predefined_file_header')
$01A6: INST CALLa dmemcmp
$01AA: INST CMPri (0, 0)
$01AE: INST JEa flcpy
$01B2: INST CMPri (0, 0)
$01B6: INST RE None
$01B7: INST INXr 3
$01B8: INST MOVrc (4, 3)
$01BA: INST MULri (4, 512)
$01BE: INST JMPa gfs2_read_file.loop
$01C2: INST MOVri (0, 1)
$01C6: INST RET None
$01C7: INST MOVri (5, 2097152)
$01CB: INST CMPri (3, 0)
$01CF: INST JEa flcpy.end
$01D3: INST MOVrc (4, 3)
$01D5: INST MULri (4, 512)
$01D9: INST ADDri (4, 16)
$01DD: INST MOVri (2, 494)
$01E1: INST DEXr 2
$01E2: INST LDDS None
$01E3: INST INXr 4
$01E4: INST STOBc (5, 0)
$01E6: INST LOOPa flcpy.loop
$01EA: INST MOVri (0, 0)
$01EE: INST RET None
$01EF: INST MOVrl (4, 'welcome_msg')
$01F3: INST INT8 129
$01F5: INST MOVrl (4, 'env_PS')
$01F9: INST INT8 129
$01FB: INST MOVrl (4, 'clen')
$01FF: INST MOVri (0, 0)
$0203: INST STOWc (4, 0)
$0205: INST MOVrl (4, 'command')
$0209: INST CALLa scans
$020D: INST MOVrl (4, 'command')
$0211: INST CALLa strnul
$0215: INST CMPri (0, 0)
$0219: INST JEa shell.aftexec
$021D: INST MOVrl (4, 'command')
$0221: INST MOVrl (5, 'com_hi')
$0225: INST CALLa strcmp
$0229: INST CMPri (0, 0)
$022D: INST JEa govnos_hi
$0231: INST MOVrl (4, 'command')
$0235: INST MOVrl (5, 'com_echo')
$0239: INST MOVri (2, 32)
$023D: INST CALLa pstrcmp
$0241: INST CMPri (0, 0)
$0245: INST JEa govnos_echo
$0249: INST MOVrl (4, 'command')
$024D: INST MOVrl (5, 'com_exit')
$0251: INST CALLa strcmp
$0255: INST CMPri (0, 0)
$0259: INST JEa govnos_exit
$025D: INST MOVrl (4, 'command')
$0261: INST MOVrl (5, 'com_calc')
$0265: INST CALLa strcmp
$0269: INST CMPri (0, 0)
$026D: INST JEa govnos_calc
$0271: INST MOVrl (4, 'command')
$0275: INST MOVrl (5, 'com_help')
$0279: INST CALLa strcmp
$027D: INST CMPri (0, 0)
$0281: INST JEa govnos_help
$0285: INST MOVrl (4, 'command')
$0289: INST MOVrl (5, 'com_gsfetch')
$028D: INST CALLa strcmp
$0291: INST CMPri (0, 0)
$0295: INST JEa govnos_gsfetch
$0299: INST MOVrl (4, 'command')
$029D: INST MOVrl (5, 'file_header')
$02A1: INST INXr 5
$02A2: INST MOVri (2, 11)
$02A6: INST CALLa memcpy
$02AA: INST MOVrl (4, 'file_tag')
$02AE: INST MOVrl (5, 'file_header')
$02B2: INST ADDri (5, 13)
$02B6: INST MOVri (2, 3)
$02BA: INST CALLa memcpy
$02BE: INST MOVrl (4, 'file_header')
$02C2: INST TRAP None
$02C3: INST CALLa gfs2_read_file
$02C7: INST CMPri (0, 0)
$02CB: INST JEa shell.call
$02CF: INST JMPa shell.bad
$02D3: INST CALL2 2097152
$02D7: INST JMPa shell.aftexec
$02DB: INST MOVrl (4, 'bad_command')
$02DF: INST INT8 129
$02E1: INST JMPa shell.prompt
$02E5: INST MOVrl (4, 'hai_world')
$02E9: INST INT8 129
$02EB: INST JMPa shell.aftexec
$02EF: INST MOVrl (4, 'gsfc_000')
$02F3: INST INT8 129
$02F5: INST MOVrl (4, 'gsfc_001')
$02F9: INST INT8 129
$02FB: INST MOVrl (4, 'env_HOST')
$02FF: INST INT8 129
$0301: INST MOVrl (4, 'gsfc_002')
$0305: INST INT8 129
$0307: INST MOVrl (4, 'env_OS')
$030B: INST INT8 129
$030D: INST MOVrl (4, 'gsfc_003')
$0311: INST INT8 129
$0313: INST MOVrl (4, 'env_CPU')
$0317: INST INT8 129
$0319: INST MOVrl (4, 'gsfc_004')
$031D: INST INT8 129
$031F: INST MOVrl (0, 'bse')
$0323: INST SUBri (0, 196610)
$0327: INST CALLa puti
$032B: INST MOVrl (4, 'gsfc_005')
$032F: INST INT8 129
$0331: INST MOVrl (4, 'gsfc_logo')
$0335: INST INT8 129
$0337: INST JMPa shell.aftexec
$033B: INST MOVrl (4, 'help_msg')
$033F: INST INT8 129
$0341: INST JMPa shell.aftexec
$0345: INST HLT 0
$0346: INST JMPa shell.aftexec
$034A: INST MOVrl (4, 'command')
$034E: INST MOVri (2, 32)
$0352: INST CALLa strtok
$0356: INST INT8 129
$0358: INST PUSHi 10
$035C: INST INT8 2
$035E: INST JMPa shell.aftexec
$0362: INST MOVrl (4, 'calc_00')
$0366: INST INT8 129
$0368: INST CALLa scani
$036C: INST MOVrl (4, 'calc_01')
$0370: INST PUSHr 0
$0372: INST INT8 129
$0374: INST CALLa scani
$0378: INST MOVrc (1, 0)
$037A: INST POPr 0
$037C: INST MOVrl (4, 'calc_02')
$0380: INST PUSHr 0
$0382: INST INT8 129
$0384: INST POPr 0
$0386: INST INT8 1
$0388: INST POPr 2
$038A: INST CMPri (2, 43)
$038E: INST JEa govnos_calc.add
$0392: INST CMPri (2, 45)
$0396: INST JEa govnos_calc.sub
$039A: INST CMPri (2, 42)

$039E: INST JEa govnos_calc.mul
$03A2: INST CMPri (2, 47)
$03A6: INST JEa govnos_calc.div
$03AA: INST JMPa govnos_calc.unk
$03AE: INST ADDrc (0, 1)
$03B0: INST CALLa puti
$03B4: INST PUSHi 10
$03B8: INST INT8 2
$03BA: INST JMPa shell.aftexec
$03BE: INST SUBrc (0, 1)
$03C0: INST CALLa puti
$03C4: INST PUSHi 10
$03C8: INST INT8 2
$03CA: INST JMPa shell.aftexec
$03CE: INST MULrc (0, 1)
$03D0: INST CALLa puti
$03D4: INST PUSHi 10
$03D8: INST INT8 2
$03DA: INST JMPa shell.aftexec
$03DE: INST DIVrc (0, 1)
$03E0: INST CALLa puti
$03E4: INST PUSHi 10
$03E8: INST INT8 2
$03EA: INST JMPa shell.aftexec
$03EE: INST MOVrl (4, 'calc_03')
$03F2: INST INT8 129
$03F4: INST JMPa shell.aftexec
$03F8: BYTES __B_raw [87, 101, 108, 99, 111, 109, 101, 32, 116, 111, 32, 27, 91, 57, 50, 109, 71, 111, 118, 110, 79, 83, 27, 91, 48, 109, 10, 0]
$0414: BYTES __B_raw [66, 97, 100, 32, 99, 111, 109, 109, 97, 110, 100, 46, 10, 0]
$0422: BYTES __B_raw [71, 111, 118, 110, 79, 83, 32, 104, 101, 108, 112, 32, 112, 97, 103, 101, 32, 49, 47, 49, 10]
$0437: BYTES __B_raw [32, 32, 103, 115, 102, 101, 116, 99, 104, 32, 32, 32, 32, 32, 83, 104, 111, 116, 32, 115, 121, 115, 116, 101, 109, 32, 105, 110, 102, 111, 10]
$0456: BYTES __B_raw [32, 32, 104, 101, 108, 112, 32, 32, 32, 32, 32, 32, 32, 32, 83, 104, 111, 119, 32, 104, 101, 108, 112, 10]
$046E: BYTES __B_raw [32, 32, 101, 99, 104, 111, 32, 32, 32, 32, 32, 32, 32, 32, 69, 99, 104, 111, 32, 116, 101, 120, 116, 32, 98, 97, 99, 107, 32, 116, 111, 32, 111, 117, 116, 112, 117, 116, 10]
$0495: BYTES __B_raw [32, 32, 101, 120, 105, 116, 32, 32, 32, 32, 32, 32, 32, 32, 69, 120, 105, 116, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 115, 104, 101, 108, 108, 10, 0]
$04B8: BYTES __B_raw [104, 105, 0]
$04BB: BYTES __B_raw [99, 97, 108, 99, 0]
$04C0: BYTES __B_raw [103, 115, 102, 101, 116, 99, 104, 0]
$04C8: BYTES __B_raw [104, 101, 108, 112, 0]
$04CD: BYTES __B_raw [101, 99, 104, 111, 32]
$04D2: BYTES __B_raw [101, 120, 105, 116, 0]
$04D7: BYTES __B_raw [104, 97, 105, 32, 119, 111, 114, 108, 100, 32, 58, 51, 10, 0]
$04E5: BYTES __B_raw [69, 110, 116, 101, 114, 32, 102, 105, 114, 115, 116, 32, 110, 117, 109, 98, 101, 114, 58, 32, 0]
$04FA: BYTES __B_raw [10, 69, 110, 116, 101, 114, 32, 115, 101, 99, 111, 110, 100, 32, 110, 117, 109, 98, 101, 114, 58, 32, 0]
$0511: BYTES __B_raw [10, 69, 110, 116, 101, 114, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 58, 32, 91, 43, 45, 42, 47, 93, 32, 0]
$052B: BYTES __B_raw [85, 110, 107, 110, 111, 119, 110, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 46, 32, 77, 97, 107, 101, 32, 115, 117, 114, 101, 32, 121, 111, 117, 32, 116, 121, 112, 101, 100, 32, 43, 44, 32, 45, 44, 32, 42, 44, 32, 47, 0]
$055D: BYTES __B_raw [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 27, 91, 57, 55, 109, 103, 115, 102, 101, 116, 99, 104, 10, 27, 91, 48, 109, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 0]
$0593: BYTES __B_raw [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 27, 91, 57, 55, 109, 72, 111, 115, 116, 58, 32, 27, 91, 48, 109, 0]
$05B0: BYTES __B_raw [10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 27, 91, 57, 55, 109, 79, 83, 58, 32, 27, 91, 48, 109, 0]
$05CC: BYTES __B_raw [10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 27, 91, 57, 55, 109, 67, 80, 85, 58, 32, 27, 91, 48, 109, 0]
$05E9: BYTES __B_raw [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 27, 91, 57, 55, 109, 77, 101, 109, 111, 114, 121, 58, 32, 27, 91, 48, 109, 0]
$0608: BYTES __B_raw [66, 47, 49, 54, 77, 105, 66, 10, 0]
$0611: BYTES __B_raw [27, 91, 54, 65, 27, 91, 51, 51, 109, 32, 32, 46, 32, 32, 32, 32, 32, 46, 32, 46, 10]
$0626: BYTES __B_raw [32, 32, 32, 32, 32, 65, 32, 32, 32, 32, 32, 46, 10]
$0633: BYTES __B_raw [32, 32, 32, 32, 40, 61, 41, 32, 46, 10]
$063D: BYTES __B_raw [32, 32, 40, 61, 61, 61, 61, 61, 41, 10]
$0647: BYTES __B_raw [32, 40, 61, 61, 61, 61, 61, 61, 61, 61, 41, 27, 91, 48, 109, 10, 10, 0]
$0659: BYTES __B_raw [71, 111, 118, 110, 80, 67, 32, 50, 52, 32, 83, 117, 112, 101, 114, 32, 69, 100, 105, 116, 105, 111, 110, 0]
$0671: BYTES __B_raw [71, 111, 118, 110, 79, 83, 32, 48, 46, 49, 46, 48, 32, 70, 111, 114, 32, 71, 111, 118, 110, 111, 67, 111, 114, 101, 50, 52, 0]
$068E: BYTES __B_raw [71, 111, 118, 110, 111, 32, 67, 111, 114, 101, 32, 50, 52, 10, 0]
$069D: BYTES __B_raw [102, 105, 108, 101, 46, 98, 105, 110, 0, 0, 0, 0, 99, 111, 109]
$06AC: RESERVE __B_reserve 16
$06BC: BYTES __B_raw [99, 111, 109, 0]
$06C0: RESERVE __B_reserve 64
$0700: RESERVE __B_reserve 2
$0702: BYTES __B_raw [8, 32, 8, 0]
$0706: BYTES __B_raw [35, 32, 0]
$0709: BYTES __B_raw [170, 85]
$070B: EOF 0 0
Formatting [32mdisk.img[0m...
Loading GovnOS into [32mdisk.img[0m... [92msuccess[0m
